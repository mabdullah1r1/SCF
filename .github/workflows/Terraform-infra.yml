name: 'Terraform-Execute'

on:
  workflow_dispatch: # This attribute will enable manual runs of the pipeline

# Use the Bash shell regardless of the GitHub Actions runner
defaults:
  run:
    shell: bash

env: 
  ROOT_PATH: '${{ github.workspace }}/src/deployment/terraform'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  STAGE_NAME: production

jobs:
  terraform_plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

#    - name: Save State
#      run: echo "::save-state name=name::${{ job.name }}"
      
#    - name: Set Output
#      run: echo "::set-output name=name::${{ job.name }}"
      
    - name: Terraform Plan
      run: terraform plan 
      working-directory: ${{ env.ROOT_PATH }}

    - name: Save State
      run: echo "::save-state name=plan_output::${{ steps.plan.outputs.stdout }}"

    - name: Set Output
      run: echo "::set-output name=plan_output::${{ steps.plan.outputs.stdout }}"      

  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    environment: Terraform-execute
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: Check Variable
      run: echo "var -> ${{ inputs.tf_destroy }}"
      working-directory: ${{ env.ROOT_PATH }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      if: ${{ inputs.tf_destroy == 'false' }}
      working-directory: ${{ env.ROOT_PATH }}

name: 'terraform-deploy'

on:

  workflow_dispatch: #this attribute will enable the manual run to the pipeline
  

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash
env: 
  ROOT_PATH: '${{github.workspace}}/src/deployment/terraform'
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
 # TF_VAR_agent_client_id: ${{ secrets.TF_VAR_agent_client_id }}
 # TF_VAR_agent_client_secret: ${{ secrets.TF_VAR_agent_client_secret }}
 # TF_VAR_subscription_id: ${{ secrets.TF_VAR_subscription_id }}
 # TF_VAR_tenant_id: ${{ secrets.TF_VAR_tenant_id }}
 # STAGE_NAME: production

jobs:
  terraform_plan:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    - name: terraform format
      id: fmt
      run: terraform fmt -check
      working-directory: ${{ env.ROOT_PATH }}
      
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.MY_GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        ref: ${{ github.event.pull_request.head.ref }}
        
    - name: generate TF Docs
      uses: terraform-docs/gh-actions@v1.0.0
      with:
         find-dir: ${{ env.ROOT_PATH }}
         output-file: READMESS.md
         output-method: inject
         git-push: "true"
      
    - name: terraform init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform Plan
      run: terraform plan 
      working-directory: ${{ env.ROOT_PATH }}
      
    - name: Save State
      run: echo "::save-state name=plan_output::${{ steps.plan.outputs.stdout }}"

    - name: Set Output
      run: echo "::set-output name=plan_output::${{ steps.plan.outputs.stdout }}"      

    - uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: ${{ env.ROOT_PATH }}
        
    - uses: actions/download-artifact@v3
      with:
        name: my-artifact
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{ env.ROOT_PATH }}

  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with: 
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
    - name: terraform Init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    - name: terraform Init
      run: echo 'var -> ${{inputs.tf_destroy}}'
      working-directory: ${{ env.ROOT_PATH }}

      #github.ref == 'refs/heads/main' && github.event_name == 'push'
    - name: terraform Apply
      run: terraform apply -auto-approve
      if: ${{inputs.tf_destroy}} == false
      working-directory: ${{ env.ROOT_PATH }}

    # - name: terraform destroy
    #   run: terraform destroy -auto-approve
    #   if: ${{inputs.tf_destroy}} == true
    #   working-directory: ${{ env.ROOT_PATH }}

name: 'terraform-deploy'

on:
  workflow_dispatch:
    inputs:
      deployment:
        description: 'deployment'
        required: true
        default: ''
       

      apply:
        description: 'Apply'
        required: true
        type: boolean
      plan:
        description: 'Plan'
        required: true
        type: boolean

defaults:
  run:
    shell: bash

env: 
  ROOT_PATH: '${{github.workspace}}/src/deployment${{github.input.deployment}}/terraform'
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

jobs:
  terraform_deploy:
    name: 'terraform plan'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.ROOT_PATH }}
        continue-on-error: false
         
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.ROOT_PATH }}

      - name: Terraform Plan
        id: plan
        run: terraform plan 
        working-directory: ${{ env.ROOT_PATH }}
        if: ${{ .inputs.plan }} == plan
        continue-on-error: false
       
      - name: Save Plan Output
        id: save_plan_output
        run: echo "::set-output name=plan_output::${{ steps.plan.outputs.stdout }}"
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: ${{ env.ROOT_PATH }}
        
      - name: Display Structure of Downloaded Files
        run: ls -R
        working-directory: ${{ env.ROOT_PATH }}
  
  terraform_apply:
    name: 'Terraform Apply'
    needs: [terraform_deploy]
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Notify
        if: ${{ inputs.apply }} == apply
        run: |
          echo "Notifying of ${{ inputs.apply }} "
          
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.ROOT_PATH }}     

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.ROOT_PATH }}
        if: ${{ inputs.apply }} == apply
        
      - name: Push Changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.MY_GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          ref: ${{ github.event.pull_request.head.ref }}
        
      - name: Generate TF Docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          find-dir: ${{ env.ROOT_PATH }}
          output-file: README.md
          output-method: inject
          git-push: "true"
    
#    - name: Terraform Apply
#      #needs: [terraform_plan]
#      #environment: production
#      run: |
#        if [[ "${{ github.event.inputs.stages }}" == "apply" ]]; then
#          terraform apply -auto-approve
#        else
#          echo "Skipping Terraform apply due to tf_destroy=true"
#       fi
#      working-directory: ${{ env.ROOT_PATH }}

  
  #terraform_apply:
  #  name: 'terraform apply'
  #  needs: [terraform_plan]
  #  runs-on: ubuntu-latest
  #  environment: production
    
  #  defaults:
  #    run:
  #      shell: bash
  

  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v2

  #  - name: Setup terraform
  #    uses: hashicorp/setup-terraform@v1
  #    with: 
  #      cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
 
  #  - name: terraform Init
  #    run: terraform init
  #    working-directory: ${{ env.ROOT_PATH }}

  #  - name: terraform Init
  #    run: echo 'var -> ${{inputs.tf_destroy}}'
  #    working-directory: ${{ env.ROOT_PATH }}

  #    #github.ref == 'refs/heads/main' && github.event_name == 'push'
  #  - name: terraform Apply
  #    run: terraform apply -auto-approve
  #    if: ${{inputs.tf_destroy}} == false
  #    working-directory: ${{ env.ROOT_PATH }}

    # - name: terraform destroy
    #   run: terraform destroy -auto-approve
    #   if: ${{inputs.tf_destroy}} == true
    #   working-directory: ${{ env.ROOT_PATH }}
